디자인패턴이란 ?
- 과거 소프트웨어 개발 과정에서 발견한 설계 노하우를 패턴으로 정리한 것으로 범용적인 코드 스타일로 의사소통을 효율적으로 할 수 있고 이미 검증된 구조이므로 설계를 빠르게 할 수 있다.
1. 생성패턴
2. 구조패턴
3. 행동패턴

싱글톤 패턴
- 인스턴스를 오직 1개만 생성하는 패턴이다. 예를들면 디비 커넥션이나 스레드 풀 객체를 생성할 때 사용한다.

팩토리 메소드 패턴
- 객체를 직접 생성하지 않고 객체를 생성하는 Factory 객체를 사용하는 패턴.
장점 : 직접 객체를 생성하는 것을 막아줘서 결합도를 낮춰주는 효과가 있다.

어댑터 패턴
- 어댑터를 사용하여 호환되지 않는 인터페이스를 호환되도록 하는 패턴.
향후에 인터페이스가 바뀌더라도 변경된 내용이 어댑터 안에 캡슐화 되므로 수정할 필요가 없다.

템플릿 메소드 패턴
- 상속을 통해 부모의 클래스의 기능 확장할 때 사용하는 방법.
예시) Abstract Map(Hash Map, Tree Map)