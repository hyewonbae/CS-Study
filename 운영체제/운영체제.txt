운영체제란 ?
- 시스템의 자원(cpu, 메모리)과 동작을 관리하는 소프트웨어
- 프로세스, 저장장치, 네트워킹, 사용자, 하드웨어를 관리

메모리 구조(RAM)
- 메모리 공간 종류 4가지 : Code, Data, Heap, Stack
Code : 실행할 프로그램의 코드
Data : 전역변수, 정적변수
Heap : 사용자의 동적 할당 (런 타임에 크기 결정)
Stack : 지역변수, 매개변수, 함수의 호출정보 (컴파일 타임에 크기 결정)

프로세스, 스레드
- 프로세스 : 실행중인 프로그램
- 스레드 : 프로세스 안에서 실행되는 실행단위
프로세스는 메모리와 CPU를 프로세스마다 할당받아서 사용하는데 스레드는 프로세스는 안에서 다른 스레드와 메모리와 CPU를 공유해서 사용.
기본적으로 프로세스당 최소 1개의 스레드(메인 스레드)를 가지고 있음.
스레드는 프로세스 내에서 각각 스택만 따로 할당받고 코드, 데이터, 힙 영역은 공유함.

CPU 스케줄러
준비큐 있는 프로세스에 대해 CPU 할당하는 방법
- 선점(Preemptive Scheduling)
SRT(Shortest Remaining Time) : 최단 잔여시간을 우선으로 처리하는 스케줄링. 진행중인 프로세스가 있어도 최단 잔여시간인 프로세스를 위해 sleep 시키고 짧은 프로세스 먼저 할당.
RR(Round Robin) : Time Sharing System을 위해 설계된 스케줄링. 모든 프로세스가 같은 우선순위를 가지고 time 퀀텀 기반으로 스케줄링.
Priority Scheduling : 우선순위가 높은 프로세스에 CPU를 우선 할당하는 방식의 스케줄링.
- 비선점(Non-Preemptive Scheduling)
FCFS(First Come First Served) : 먼저 CPU를 요청하는 프로세스를 먼저 처리하는 방식.
SJF(Shortest Job First) : 평균 waiting time을 최소화 하기 위해 사용하는 방식. 버스트 시간이 짧은 프로세스부터 CPU 할당.

가상메모리란 ?
- 사용하는 부분만 메모리에 올리고 나머지는 디스크에 보관

데드락이란 ?
- 프로세스가 자원을 얻지못해 다음 작업을 못하는 상태
예를들어, p1,p2가 각각 자원 A와 B를 얻어야하는데 p1은 A를 p2는 B를 가지고 있어서 서로 무한정 기다리고 있는 상태.
발생조건 4가지
- 상호배제 : 자원은 한 번에 한 프로세스만이 사용 가능하다.
- 점유대기 : 최소한 하나의 자원을 점유하고 있으면 다른 프로세스에 할당되어 사용하고 있는 자원을 추가로 점유하기 위해 대기하는 프로세스가 있어야한다.
- 비선점 : 다른 프로세스에 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없어야 한다.
- 순환대기 : 프로세스의 집합에서 p1은 p2가 점유한 자원을 대기하고 p2는 P3가 점유한 자원을, pn-1은 pn이 점유한 자원을 대기하며 pn은 p0이 점유한 자원을 요구해야 한다.